'use strict';

/**
 * Paint Board
 **/

(function ($) {
  'use strict';

  return;

  var defaults = {
    clicked: false,
    startX: 0,
    startY: 0,
    endX: 0,
    endY: 0
  };

  $('.hero').on('mousedown', function (e) {
    defaults.clicked = true;
    defaults.startX = e.clientX;
    defaults.startY = e.clientY;
  });

  $('.hero').on('mousemove', function (e) {
    var start = $('<div class="start"></div>');
    if (defaults.clicked) {
      start.css({ 'left': e.offsetX, 'top': e.offsetY });
      $(this).append(start);
    }
  });

  $('.hero').on('mouseup', function (e) {
    defaults.clicked = false;
    defaults.endX = e.clientX;
    defaults.endY = e.clientY;
    defaults.degree = Math.atan2(defaults.endY - defaults.startY, defaults.endX - defaults.startX) * 180 / Math.PI;
    defaults.hypotenuse = (defaults.endX - defaults.startX) / Math.cos(defaults.degree * Math.PI / 180);
    $(this).find('.start').remove();
    var line = $('<div class="line"></div>');
    line.css({
      'left': defaults.startX,
      'top': defaults.startY,
      'width': defaults.hypotenuse,
      'transform': 'rotate(' + defaults.degree + 'deg)'
    });
    $(this).append(line);
    defaults.startX = defaults.startY = defaults.endX = defaults.endY = defaults.degree = defaults.hypotenuse = 0;
  });
})(jQuery);
/**
 * Memory board game Algorithm.
 * 1) Set of two actions.
 *    a) Store number of first click.
 *    b) If same number on second click, Success.
 *    c) Else, Revert.(Failure) (Increment attempts counter)


(function($) {
  'use strict';
  var attemptsCounter = 0;
  var currentAttempt = null;
  // List of buttons who are already acted on with success
  var invalidButtons = [];

  $(document).ready(function () {

    updateAttemptsCounter(attemptsCounter);

    $('.button').click(function () {
      var thisButtonVal = $(this).data('val');

      // Not doing anything if invalid button
      if (invalidButtons.indexOf(thisButtonVal) !== -1) {
        alert('invalid');
        return;
      };
      if (!currentAttempt) {
        currentAttempt = thisButtonVal;
      } else {
        if (currentAttempt !== thisButtonVal) {
          updateAttemptsCounter(++attemptsCounter);
        } else {
          invalidButtons.push(thisButtonVal);
        }
        currentAttempt = null;
      }
    });

    function updateAttemptsCounter(val) {
      $('#attemptsCounter').html(val);
    }
  });
})(jQuery);
 **/
"use strict";
"use strict";

(function () {
  "use strict";

  // let blocks = [
  //   {
  //     id: 'cube',
  //     className: '.cube',
  //     orientation: 'left',
  //     width: 30,
  //     height: 30
  //   },
  //   {
  //     id: 'small-L-left',
  //     className: '.small-l.left',
  //     orientation: 'left',
  //     width: 10,
  //     height: 30
  //   },
  //   {
  //     id: 'small-L-bottom',
  //     className: '.small-l.bottom',
  //     orientation: 'bottom',
  //     width: 30,
  //     height: 10
  //   },
  //   {
  //     id: 'capital-L-bottom',
  //     className: '.capital-l.bottom',
  //     orientation: 'bottom',
  //     width: 30,
  //     height: 20
  //   },
  //   {
  //     id: 'capital-L-left',
  //     className: '.capital-l.left',
  //     orientation: 'left',
  //     width: 20,
  //     height: 30
  //   }
  // ];
  //
  // blocks = [
  //   {
  //     id: 'capital-L-bottom',
  //     className: '.capital-l.bottom',
  //     orientation: 'bottom',
  //     width: 30,
  //     height: 20
  //   }
  // ];
  //
  // let selectedBlock, selectedBlockOffsetTop;
  // let lastFallenBlock, randomBlock;
  // let deadBottomPosition = $('#field').offset().top + $('#field').height();
  // _triggerNextBlock();
  //
  // function _triggerNextBlock() {
  //   randomBlock = blocks[Math.floor(Math.random() * blocks.length)];
  //   selectedBlock = $(`${randomBlock.className}`).clone().appendTo('#field');
  //   selectedBlockOffsetTop = selectedBlock.offset().top + selectedBlock.height();
  //   selectedBlock.show();
  //   $('#sidePanel').remove('.block').html(selectedBlock.clone());
  //   _startBlockFallingTimer();
  // }
  //
  // function _startBlockFallingTimer() {
  //   let i = 0;
  //   let blockFallingInterval = setInterval(() => {
  //     i += 10;
  //     selectedBlock.css('top', i);
  //     selectedBlockOffsetTop = selectedBlock.offset().top + selectedBlock.height();
  //     if (selectedBlockOffsetTop === deadBottomPosition) {
  //       clearInterval(blockFallingInterval);
  //       lastFallenBlock = selectedBlock;
  //       deadBottomPosition = selectedBlockOffsetTop;
  //       _triggerNextBlock();
  //     }
  //   }, 50);
  // }

  console.log('sdf');
})();